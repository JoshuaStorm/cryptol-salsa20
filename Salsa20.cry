// Implementation by Joshua S. Becker
// Based on Salsa20 Specification by Daniel J. Bernstein
// http://cr.yp.to/snuffle/spec.pdf
// August 26th, 2015
// Written for readability

/***************************************************************
******** Usage note: For use for encryption/decryption, ********
******** simply use Salsa20Encrypt function via Cryptol ********
********* Inputs are in the order of the 16 or 32-byte *********
********* key, then an 8-byte nonce, then the variable *********
********* length message  for encryption or decryption *********
************** (It may be useful to set ascii on) **************
****************************************************************
****************************************************************
****************************************************************
* Syntax:                                                      *
Main> :s ascii=on                                              *
Main> Salsa20Encrypt [0,1..31] [0,1..7] "Some message of sorts"*
"}\194b:8:L\189\165\DC3\212\204\b\139\&2\215\\\180\&6\220\b"   *
****************************************************************
***************************************************************/

module Salsa20 where

quarterround : [4][32] -> [4][32]
quarterround [y0,y1,y2,y3] = [z0,z1,z2,z3]
  where
    z1 = y1 ^ ((y0 + y3) <<<  7)
    z2 = y2 ^ ((z1 + y0) <<<  9)
    z3 = y3 ^ ((z2 + z1) <<< 13)
    z0 = y0 ^ ((z3 + z2) <<< 18)

rowround : [16][32] -> [16][32]
rowround ys = zs
  where
    [y0,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15] = ys
    [ z0, z1, z2, z3] = quarterround [ y0, y1, y2, y3]
    [ z5, z6, z7, z4] = quarterround [ y5, y6, y7, y4]
    [z10,z11, z8, z9] = quarterround [y10,y11, y8, y9]
    [z15,z12,z13,z14] = quarterround [y15,y12,y13,y14]
    zs = [z0,z1,z2,z3,z4,z5,z6,z7,z8,z9,z10,z11,z12,z13,z14,z15]

columnround : [16][32] -> [16][32]
columnround xs = ys
  where
    [x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15] = xs
    [ y0, y4, y8,y12] = quarterround [ x0, x4, x8,x12]
    [ y5, y9,y13, y1] = quarterround [ x5, x9,x13, x1]
    [y10,y14, y2, y6] = quarterround [x10,x14, x2, x6]
    [y15, y3, y7,y11] = quarterround [x15, x3, x7,x11]
    ys = [y0,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15]

doubleround : [16][32] -> [16][32]
doubleround xs = rowround (columnround xs)

littleendian : [32] -> [32]
littleendian b = join (reverse [b0,b1,b2,b3])
  where [b0,b1,b2,b3] = split b

Salsa20Hash : [64][8] -> [64][8]
Salsa20Hash x = result
  where
    Xs  = [ littleendian xi | xi <- split (join x)          ]
    Zs  = [Xs] # [ doubleround prev | prev <- Zs            ]
    XZs = [ littleendian XZ | XZ <- split (join Xs) + Zs@10 ]
    result = split (join XZs)

Salsa20Exp : {k} (fin k, k>=1, 2>=k) => [k*16][8] -> [16][8] -> [64][8]
Salsa20Exp k n = out
  where
    [k0,k1] = split (k#zero) : [2][16][8]
    in  = if (`k == 2)
          then sig0#k0#sig1#n#sig2#k1#sig3 // See constants section
          else tau0#k0#tau1#n#tau2#k0#tau3 // See constants section
    out = Salsa20Hash (split (join in))

Salsa20Encrypt : {k, l} (fin k, k>=1, 2>=k, fin l, 2^^70>=l) =>
                 [k*16][8] -> [8][8] -> [l][8] -> [l][8]
Salsa20Encrypt k v m = CT
  where
    Exp = [ Salsa20Exp k (v#(split i)) | i <- [0,1...] ]
    CT  = m ^ (take (join Exp))


// Constants

sig0 = [101,120,112, 97]
sig1 = [110,100, 32, 51]
sig2 = [ 50, 45, 98,121]
sig3 = [116,101, 32,107]

tau0 = [101,120,112, 97]
tau1 = [110,100, 32, 49]
tau2 = [ 54, 45, 98,121]
tau3 = [116,101, 32,107]


// Properties to check test vectors

property quarterroundWorks =
  quarterround qInput == qOutput

property rowroundWorks =
  rowround rInput == rOutput

property columnroundWorks =
  columnround cInput == cOutput

property doubleroundWorks =
  doubleround dInput == dOutput

property littleendianWorks =
  littleendian lInput == lOutput

// Doesn't work with CVC4
//property littleendianIsInvertible INPUT =
//  littleendian (littleendian INPUT) == INPUT

property Salsa20HashWorks =
  Salsa20Hash hInput == hOutput

property Salsa20ExpWorks =
  Salsa20Exp xkInput xnInput == xOutput


// Test vectors

qInput  = [0xd3917c5b, 0x55f1c407, 0x52a58a7a, 0x8f887a3b]
qOutput = [0x3e2f308c, 0xd90a8f36, 0x6ab2a923, 0x2883524c]

rInput  = [0x08521bd6, 0x1fe88837, 0xbb2aa576, 0x3aa26365,
           0xc54c6a5b, 0x2fc74c2f, 0x6dd39cc3, 0xda0a64f6,
           0x90a2f23d, 0x067f95a6, 0x06b35f61, 0x41e4732e,
           0xe859c100, 0xea4d84b7, 0x0f619bff, 0xbc6e965a]
rOutput = [0xa890d39d, 0x65d71596, 0xe9487daa, 0xc8ca6a86,
           0x949d2192, 0x764b7754, 0xe408d9b9, 0x7a41b4d1,
           0x3402e183, 0x3c3af432, 0x50669f96, 0xd89ef0a8,
           0x0040ede5, 0xb545fbce, 0xd257ed4f, 0x1818882d]

cInput  = [0x08521bd6, 0x1fe88837, 0xbb2aa576, 0x3aa26365,
           0xc54c6a5b, 0x2fc74c2f, 0x6dd39cc3, 0xda0a64f6,
           0x90a2f23d, 0x067f95a6, 0x06b35f61, 0x41e4732e,
           0xe859c100, 0xea4d84b7, 0x0f619bff, 0xbc6e965a]
cOutput = [0x8c9d190a, 0xce8e4c90, 0x1ef8e9d3, 0x1326a71a,
           0x90a20123, 0xead3c4f3, 0x63a091a0, 0xf0708d69,
           0x789b010c, 0xd195a681, 0xeb7d5504, 0xa774135c,
           0x481c2027, 0x53a8e4b5, 0x4c1f89c5, 0x3f78c9c8]

dInput  = [0xde501066, 0x6f9eb8f7, 0xe4fbbd9b, 0x454e3f57,
           0xb75540d3, 0x43e93a4c, 0x3a6f2aa0, 0x726d6b36,
           0x9243f484, 0x9145d1e8, 0x4fa9d247, 0xdc8dee11,
           0x054bf545, 0x254dd653, 0xd9421b6d, 0x67b276c1]
dOutput = [0xccaaf672, 0x23d960f7, 0x9153e63a, 0xcd9a60d0,
           0x50440492, 0xf07cad19, 0xae344aa0, 0xdf4cfdfc,
           0xca531c29, 0x8e7943db, 0xac1680cd, 0xd503ca00,
           0xa74b2ad6, 0xbc331c5c, 0x1dda24c7, 0xee928277]

lInput  = join [86, 75, 30, 9]
lOutput = 0x091e4b56

hInput  = [211,159, 13,115, 76, 55, 82,183,
             3,117,222, 37,191,187,234,136,
            49,237,179, 48,  1,106,178,219,
           175,199,166, 48, 86, 16,179,207,
            31,240, 32, 63, 15, 83, 93,161,
           116,147, 48,113,238, 55,204, 36,
            79,201,235, 79,  3, 81,156, 47,
           203, 26,244,243, 88,118,104, 54]
hOutput = [109, 42,178,168,156,240,248,238,
           168,196,190,203, 26,110,170,154,
            29, 29,150, 26,150, 30,235,249,
           190,163,251, 48, 69,144, 51, 57,
           118, 40,152,157,180, 57, 27, 94,
           107, 42,236, 35, 27,111,114,114,
           219,236,232,135,111,155,110, 18,
            24,232, 95,158,179, 19, 48,202]

xkInput = [1..16] # [201..216]
xnInput = [101..116]
xOutput = [ 69, 37, 68, 39, 41, 15,107,193,
           255,139,122,  6,170,233,217, 98,
            89,144,182,106, 21, 51,200, 65,
           239, 49,222, 34,215,114, 40,126,
           104,197,  7,225,197,153, 31,  2,
           102, 78, 76,176, 84,245,246,184,
           177,160,133,130,  6, 72,149,119,
           192,195,132,236,234,103,246, 74]

ekInput = split 0x80000000000000000000000000000000
evInput = split 0x0000000000000000
emInput = (zero : [512][8])
